bash-3.2$ python3 
Python 3.9.6 (default, Mar 10 2023, 20:16:38) 
[Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> # Using Lists as Queues
>>> 
>>> from collections import deque
>>> queue = deque(["Java","Program","Python"])
>>> queue.append("C++")
>>> queue.append("NodeJs")
>>> queue
deque(['Java', 'Program', 'Python', 'C++', 'NodeJs'])
>>> queue.pop() 
'NodeJs'
>>> queue.popleft()
'Java'
>>> eueue.popleft()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'e' is not defined
>>> queue.popleft()
'Program'
>>> 
>>> queue
deque(['Python', 'C++'])
>>> 
>>> # List Comprehensions 
>>> 
>>> cube = []
>>> for i in range(10):
...     cube.append(i***2)
  File "<stdin>", line 2
    cube.append(i***2)
                   ^
SyntaxError: invalid syntax
>>> 
>>> for i in range(10):
...     cube.append(i**2)
... 
>>> 
>>> cube
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> # If the above program use lambda 
>>> 
>>> squares = list(map(lambda x: x**2, range(10)))
>>> squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> squares = [i**2 for i in range(10)]
>>> squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> # Matrix example
>>> 
>>> em_list = []
>>> for x in [1,2,3]
  File "<stdin>", line 1
    for x in [1,2,3]
                    ^
SyntaxError: invalid syntax
>>> 
>>> em_list = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...             if x!y:
  File "<stdin>", line 3
    if x!y:
        ^
SyntaxError: invalid syntax
>>> 
>>> em_list = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...             if x!=y:
...                     em_list.append(i,j)
... 
Traceback (most recent call last):
  File "<stdin>", line 4, in <module>
NameError: name 'j' is not defined
>>> 
>>> 
>>> em_list = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...             if x!=y:
...                     em_list.append((x,y))
... 
>>> em_list
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
>>> 
>>> # another way 
>>> 
>>> [(x,y) for x in [1,2,3] for y in [3,1,4] if x!=y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
>>> 
>>> # Example
>>> 
>>> list = [-3,-2,-1,0,1,2,3]
>>> [i**2 for i in list]
[9, 4, 1, 0, 1, 4, 9]
>>> 
>>> list
[-3, -2, -1, 0, 1, 2, 3]
>>> 
>>> [i**2 for i in list if i>0]
[1, 4, 9]
>>> 
>>> [abs(i**2) for i in list]
[9, 4, 1, 0, 1, 4, 9]
>>> 
>>> 
>>> # Example
>>> 
>>> list_fruits = ['apple','banane','pears']
>>> 
>>> list_fruits = ['apple  ','  banane  ','    pears   ']
>>> list_fruits
['apple  ', '  banane  ', '    pears   ']
>>> 
>>> [i.strip for i in list_fruits]
[<built-in method strip of str object at 0x10282a9b0>, <built-in method strip of str object at 0x10289d230>, <built-in method strip of str object at 0x1028d5170>]
>>> 
>>> [i.strip() for i in list_fruits]
['apple', 'banane', 'pears']
>>> 
>>> [i,i**2 for i in range(10)]
  File "<stdin>", line 1
    [i,i**2 for i in range(10)]
            ^
SyntaxError: invalid syntax
>>> 
>>> [(i,i**2) for i in range(10)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25), (6, 36), (7, 49), (8, 64), (9, 81)]
>>> 
>>> # Example
>>> 
>>> vec = [[1,2,3],[4,5,6],[7,8,9]]
>>> vec
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> [j for i in vec for j in i]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> 
>>> # Example
>>> 
>>> import math
>>> dir(math)
['__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']
>>> 
>>> from import import pi
  File "<stdin>", line 1
    from import import pi
         ^
SyntaxError: invalid syntax
>>> 
>>> from math import pi
>>> [str(round(i)) for i in range(1,10)]
['1', '2', '3', '4', '5', '6', '7', '8', '9']
>>> 
>>> [str(round(pi,i)) for i in range(1,10)]
['3.1', '3.14', '3.142', '3.1416', '3.14159', '3.141593', '3.1415927', '3.14159265', '3.141592654']
>>> 
>>> 22/7
3.142857142857143
>>> 
>>> 22/7
3.142857142857143
>>> 
>>> # Nested List Comprehsions 
>>> 
>>> matrix = [
...     [1, 2, 3, 4],
...     [5, 6, 7, 8],
...     [9, 10, 11, 12],
... ]
>>> 
>>> matrix
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
>>> 
>>> [[row[i] for i in matrix] for i range(4)]
  File "<stdin>", line 1
    [[row[i] for i in matrix] for i range(4)]
                                    ^
SyntaxError: invalid syntax
>>> 
>>> [[row[i] for row in matrix] for i range(4)]
  File "<stdin>", line 1
    [[row[i] for row in matrix] for i range(4)]
                                      ^
SyntaxError: invalid syntax
>>> 
>>> [[row[i] for row in matrix] for i in range(4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
>>> 
>>> # Transpose of rows and columns 
>>> 
>>> transpose = []
>>> for i in range(4):
...     transpose.append([row[i] for row in matrix])
... 
>>> transpose
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
>>> 
>>> # 3X4 -> 4X3 
>>> 
>>> (*matrix)
  File "<stdin>", line 1
    (*matrix)
     ^
SyntaxError: can't use starred expression here
>>> 
>>> zip(*matrix)
<zip object at 0x102912500>
>>> list(zip(*matrix))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not callable
>>> 
>>> matrix
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
>>> 
>>> list(zip(*matrix))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not callable
>>> 
>>> # del statement 
>>> 
>>> a = [-1, 1, 0, 12, 13]
>>> del a[0]
>>> a
[1, 0, 12, 13]
>>> 
>>> del a[2:4]
>>> del
  File "<stdin>", line 1
    del
       ^
SyntaxError: invalid syntax
>>> a
[1, 0]
>>> 
>>> del a[:]
>>> a
[]
>>> len(a)
0
>>> 
>>> # Tuples & Sequences
>>> 
>>> t = 12345, 54345, 'hello'
>>> t[0]
12345
>>> 
>>> tt = t, (1,3,4,5,6)
>>> tt
((12345, 54345, 'hello'), (1, 3, 4, 5, 6))
>>> 
>>> tt[0]
(12345, 54345, 'hello')
>>> tt[1]
(1, 3, 4, 5, 6)
>>> 
>>> tt[0][0]
12345
>>> tt[1][0]
1
>>> tt[0][2]
'hello'
>>> 
>>> # Example
>>> 
>>> empty = ()
>>> len(empty)
0
>>> str = 'hello'
>>> len(str)
5
>>> str = 'hello',
>>> len(str)
1
>>> 
>>> a,b,c,d=10
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: cannot unpack non-iterable int object
>>> 
>>> a,b=1,0
>>> a,b,c=1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: cannot unpack non-iterable int object
>>> 
>>> a,b,c=1,
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 3, got 1)
>>> 
>>> a,b,c=1,0,3
>>> 
>>> a=b=c=d=10
>>> 
>>> a
10
>>> b
10
>>> c
10
>>> d
10
>>> 
>>> a,b,c=1,0,3
>>> a
1
>>> b
0
>>> c
3
>>> 
>>> #set 
>>> 
>>> str = "aabbccdd"
>>> set(str)
{'b', 'a', 'd', 'c'}
>>> 
>>> printlist(set(str))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'printlist' is not defined
>>> 
>>> print(list(set(str)))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not callable
>>> 
>>> print(set(str))
{'b', 'a', 'd', 'c'}
>>> 
>>> # Sets
>>> 
>>> # list = []
>>> # tuples = ()
>>> # dictionary = {'key':'values'}
>>> # set = {}
>>> 
>>> # Set 
>>> 
>>> basket = {'apple','banana','grapes','pears','coconut'}
>>> print(basket)
{'coconut', 'pears', 'grapes', 'apple', 'banana'}
>>> 'orange' in basket 
False
>>> 'pears' in basket
True
>>> 
>>> str1 = 'tiyaeugfjisbfhksgh'
>>> str2 = 'ayefbekfbhkeshfwef'
>>> str1 - str2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'str' and 'str'
>>> 
>>> str1 | str2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for |: 'str' and 'str'
>>> 
>>> str1 = 'aabbccdd'
>>> str2 = 'aaddee'
>>> str1 - str2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'str' and 'str'
>>> 
>>> # Example
>>> 
>>> a = [i for i in 'aabbccdd' if i not in 'abc']
>>> a
['d', 'd']
>>> 
>>> # Dictionaries 
>>> 
>>> dic = {'java':1000,'python':2000}
>>> dic['java']
1000
>>> 'java' in dic
True
>>> 'C++' in dic
False
>>> 
>>> del['java']
  File "<stdin>", line 1
    del['java']
        ^
SyntaxError: cannot delete literal
>>> 
>>> del dic['java']
>>> dic
{'python': 2000}
>>> 
>>> # Looping techniques 
>>> 
>>> dic = {'java':1000,'python':2000}
>>> for k,v in dic.items():
...     print(k,v)
... 
java 1000
python 2000
>>> 
>>> # enumerate 
>>> 
>>> for i,v in dic.items():
...     print(i,v)
... 
java 1000
python 2000
>>> 
>>> for i,v in enumerate[('apple','cat','boy')]:
...     print(i,v)
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'types.GenericAlias' object is not iterable
>>> 
>>> for i,v in enumerate(['apple','cat','boy']):
...     print(i,v)
... 
0 apple
1 cat
2 boy
>>> 
>>> str1 = ['java','python','program']
>>> str2 = ['apple','banana','orange']
>>> for i,j in zip(str1,str2):
...     print('first element {0}? it is {1}.'.format(i,j))
... 
first element java? it is apple.
first element python? it is banana.
first element program? it is orange.
>>> 
>>> # Example
>>> 
>>> for i in range(1,10,2):
...     print(i)
... 
1
3
5
7
9
>>> 
>>> for i in reversed(range(1,10,2)):
...     print(i)
... 
9
7
5
3
1
>>> 
>>> str = 'abcde'
>>> str[::-1]
'edcba'
>>> 
>>> # example
>>> 
>>> basket = ['apple','banana','orange','pear']
>>> i for i in range(basket):
  File "<stdin>", line 1
    i for i in range(basket):
      ^
SyntaxError: invalid syntax
>>> 
>>> [i for i in range(basket):]
  File "<stdin>", line 1
    [i for i in range(basket):]
                             ^
SyntaxError: invalid syntax
>>> 
>>> [i for i in range(basket)]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object cannot be interpreted as an integer
>>> 
>>> basket = ['apple','banana','orange','pear']
>>> for i in range(basket):
...     print(i)
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object cannot be interpreted as an integer
>>> 
>>> basket = ['apple','banana','orange','pear']
>>> for i in sorted(basket):
...     print(i)
... 
apple
banana
orange
pear
>>> 
>>> # Example
>>> 
>>> basket = ['apple','banana','orange','pear','apple']
>>> for i in sorted(set(basket)):
...     print(i)
... 
apple
banana
orange
pear
>>> 
>>> # Example
>>> 
>>> import math 
>>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
>>> fil_data = []
>>> for value in raw_data:
...     if not math.isnan(value):
...             fil_data.append(value)
... 
>>> fil_data
[56.2, 51.7, 55.3, 52.5, 47.8]
>>> 
>>> len(fil_data)
5
>>> 
>>> float('NaN')
nan
>>> 