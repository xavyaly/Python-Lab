bash-3.2$ python3 
Python 3.9.6 (default, Mar 10 2023, 20:16:38) 
[Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> a,b,c=2,"Hi",10.5
>>> print(type(a))
<class 'int'>
>>> print(type(b))
<class 'str'>
>>> print(type(c))
<class 'float'>
>>> 
>>> d=1+i10
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'i10' is not defined
>>> d=1+10j
>>> print(type(d))
<class 'complex'>
>>> 
>>> str="String a value"
>>> print(str)
String a value
>>> 
>>> str1='''multiline string'''
>>> print(str1)
multiline string
>>> 
>>> print(type(str))
<class 'str'>
>>> print(type(str1))
<class 'str'>
>>> 
>>> str1="Hello worlds !!!"
>>> str2="Hello wolrds !!!"
>>> 
>>> print(str1[0:2])
He
>>> print(str1[5])
 
>>> print(str1[6])
w
>>> 
>>> print(str1*str2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'str'
>>> 
>>> str1,str2="Hello world","hello"
>>> print(str1*str2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'str'
>>> 
>>> 
>>> print(str1*2)
Hello worldHello world
>>> 
>>> print(str1*str2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'str'
>>> print(str1+str2)
Hello worldhello
>>> 
>>> print(str1+" "+str2)
Hello world hello
>>> 
>>> List
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'List' is not defined
>>> 
>>> list=[2,3,'hello',5]
>>> list
[2, 3, 'hello', 5]
>>> 
>>> print(list[1:3])
[3, 'hello']
>>> 
>>> print(list*3)
[2, 3, 'hello', 5, 2, 3, 'hello', 5, 2, 3, 'hello', 5]
>>> 
>>> # Tuple 
>>> 
>>> tuple = ('string',2,'hello')
>>> 
>>> print(tuple(1:3))
  File "<stdin>", line 1
    print(tuple(1:3))
                 ^
SyntaxError: invalid syntax
>>> 
>>> print(tuple[1:3])
(2, 'hello')
>>> 
>>> print(tuple * tuple)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'tuple'
>>> 
>>> print(tuple * 2)
('string', 2, 'hello', 'string', 2, 'hello')
>>> 
>>> print(tuple * tuple)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'tuple'
>>> 
>>> print(tuple + tuple)
('string', 2, 'hello', 'string', 2, 'hello')
>>> 
>>> tuple[2]
'hello'
>>> tuple[2]="hi"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> 
>>> list
[2, 3, 'hello', 5]
>>> list[2]="hi"
>>> list
[2, 3, 'hi', 5]
>>> 
>>> # tuple is immutable 
>>> 
>>> # Dictionary
>>> 
>>> dic = {1:'Java',2:'Python',3:"Docker"}
>>> 
>>> dic
{1: 'Java', 2: 'Python', 3: 'Docker'}
>>> 
>>> print(keys)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'keys' is not defined
>>> print(dic.keys)
<built-in method keys of dict object at 0x102a5e8c0>
>>> 
>>> print(dic.keys())
dict_keys([1, 2, 3])
>>> 
>>> print(dic.values())
dict_values(['Java', 'Python', 'Docker'])
>>> 
>>> print(dic[1])
Java
>>> print(dic[4])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 4
>>> print(dic[3])
Docker
>>> 
>>> print(dic[0])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 0
>>> 
>>> # Boolean
>>> 
>>> print(type(True))
<class 'bool'>
>>> 
>>> print(type(False))
<class 'bool'>
>>> 
>>> print(False)
False
>>> 
>>> print(false)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'false' is not defined
>>> 
>>> 
>>> str='aabbcc'
>>> print(set(str))
{'c', 'a', 'b'}
>>> 
>>> setx={'hello',4,'world',5'}
  File "<stdin>", line 1
    setx={'hello',4,'world',5'}
                               ^
SyntaxError: EOL while scanning string literal
>>> 
>>> setx={'hello',4,'world',5}
>>> 
>>> setx
{'hello', 4, 5, 'world'}
>>> 
>>> setx.add(10)
>>> setx
{4, 5, 'world', 10, 'hello'}
>>> 
>>> setx.add(2,12)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: set.add() takes exactly one argument (2 given)
>>> 
>>> setx.remove([2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> 
>>> setx.remove(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 2
>>> 
>>> setx
{4, 5, 'world', 10, 'hello'}
>>> 
>>> setx.remove(4)
>>> 
>>> setx
{5, 'world', 10, 'hello'}
>>> 
>>> # END 
>>> 
>>> import keyword
>>> dir(keyword)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'iskeyword', 'issoftkeyword', 'kwlist', 'softkwlist']
>>> 
>>> print(keyword.kwlist)
['False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
>>> 
>>> print(keyword.__doc__)
Keywords (from "Grammar/python.gram")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree and run:

    PYTHONPATH=Tools/peg_generator python3 -m pegen.keywordgen         Grammar/Grammar         Grammar/Tokens         Lib/keyword.py

Alternatively, you can run 'make regen-keyword'.

>>> 
>>> a=false
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'false' is not defined
>>> 
>>> a=continue
  File "<stdin>", line 1
    a=continue
      ^
SyntaxError: invalid syntax
>>> 
>>> print( 4 == 4 )  
True
>>> print( 6 > 9 )  
False
>>> print( True or False )  
True
>>> print( 9 <= 28 )  
True
>>> print( 6 > 9 )  
False
>>> print( True and False )  
False
>>> 
>>> print( None == 0 )  
False
>>> print( None == " " )  
False
>>> print( None == False )  
False

>>> for i in range(10):
...     print(i)
... 
0
1
2
3
4
5
6
7
8
9
>>> 
>>> for i in range(0,10):
...     print(i)
... 
0
1
2
3
4
5
6
7
8
9
>>> 
>>> for i in range(2,10):
...     print(i)
... 
2
3
4
5
6
7
8
9
>>> for i in range(2,10,2):
...     print(i)
... 
2
4
6
8
>>> 
