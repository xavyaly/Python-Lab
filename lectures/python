
% python3 --version
Python 3.9.6
javedalam@Javeds-MacBook-Air PythonLabs % python3          
Python 3.9.6 (default, Mar 10 2023, 20:16:38) 
[Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 2=2
  File "<stdin>", line 1
    2=2
    ^
SyntaxError: cannot assign to literal
>>> 2+2
4
>>> 2**3
8
>>> 2+3*6
20
>>> (2+3)*6
30
>>> 3758*3647
13705426
>>> 
>>> 20/7
2.857142857142857
>>> 
>>> 23%7
2
>>> 1     +       1
2
>>> (1+2) * (2-3) ** (1+1)
3
>>> 
>>> 
>>> 5 + 
  File "<stdin>", line 1
    5 + 
        ^
SyntaxError: invalid syntax
>>> 
>>> 2 + 3 *  - 2 
-4
>>> 
>>> 2 + 3 - * 2
  File "<stdin>", line 1
    2 + 3 - * 2
            ^
SyntaxError: invalid syntax
>>> 
>>> 
>>> 'hello world!'
'hello world!'
>>> 
>>> 'hello world!
  File "<stdin>", line 1
    'hello world!
                 ^
SyntaxError: EOL while scanning string literal
>>> 
>>> 'ja' 'va'
'java'
>>> 
>>> 'ja'+'va'
'java'
>>> 
>>> 'ja' + 32
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate str (not "int") to str
>>> 
>>> 'ja' * 5 
'jajajajaja'
>>> 
>>> 'ja' * 'va'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'str'
>>> 
>>> 'ja' * 5.0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'float'
>>> 
>>> a=40
>>> a
40
>>> a,b=20,30
>>> a
20
>>> b
30
>>> a+b
50
>>> a+b+b
80
>>> a=a+20
>>> a
40
>>> 
>>> print(a)
40
>>> 
>>> str='hello'
>>> str
'hello'
>>> str="world"
>>> str
'world'
>>> 
>>> a=input("Enter any random digit: ")
Enter any random digit: 10
>>> a=input("Enter any random digit: ")
Enter any random digit: 20
>>> a
'20'
>>> 
>>> len('hello')
5
>>> len('hellowojfhsdhfuohi')
18
>>> 
>>> dir(len)
['__call__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__self__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__text_signature__']
>>> 
>>> dir(math)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'math' is not defined
>>> 
>>> len('')
0
>>> 
>>> import math
>>> dir(math)
['__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']
>>> 
>>> 
>>> print('You have'+10+'biscuits')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate str (not "int") to str
>>> 
>>> print('You have'+'biscuits')
You havebiscuits
>>> print('You have'+''+'biscuits')
You havebiscuits
>>> print('You have'+' '+'biscuits')
You have biscuits
>>> 
>>> str(10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object is not callable
>>> 
>>> print('You have'+str(10)+'biscuits')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object is not callable
>>> 
>>> print('You have'+"10"+'biscuits')
You have10biscuits
>>> 
>>> print('You have'+' '+"10"+' '+biscuits')
  File "<stdin>", line 1
    print('You have'+' '+"10"+' '+biscuits')
                                            ^
SyntaxError: EOL while scanning string literal
>>> 
>>> print('You have'+' '+"10"+' '+'biscuits')
You have 10 biscuits
>>> 
>>> str(10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object is not callable
>>> 
>>> str(0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object is not callable
>>> 
>>> str(2.3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object is not callable
>>> 
>>> int('42')
42
>>> 
>>> int(1.99)
1
>>> 
>>> float('20.20')
20.2
>>> 
>>> float('20')
20.0
>>> 
>>> a=input()
10
>>> a
'10'
>>> 
>>> int('10.00')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '10.00'
>>> 
>>> 
>>> a=True
>>> a
True
>>> true
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'true' is not defined
>>> true=2+3
>>> true
5
>>> 
>>> 2=2
  File "<stdin>", line 1
    2=2
    ^
SyntaxError: cannot assign to literal
>>> 
>>> 2==2
True
>>> 2==3
False
>>> 2!=3
True
>>> 2!=2
False
>>> 
>>> 
>>> 'hello'=='hello'
True
>>> 'hello'=='hEllo'
False
>>> 
>>> True != False
True
>>> 
>>> 1 == 1.0 
True
>>> 
>>> 1 == '1'
False
>>> 
>>> 1<100
True
>>> 1>100
False
>>> 
>>> a=35
>>> a>40
False
>>> 
>>> True and True
True
>>> True and False
False
>>> 
>>> True or False
True
>>> True or True
True
>>> 
>>> type(1)
<class 'int'>
>>> type(1.0)
<class 'float'>
>>> type('1.0')
<class 'str'>
>>> 
>>> (1<2) and (2<3)
True
>>> 
>>> (1<2) or (2<3)
True
>>> 
>>> (1<2) or (2>3)
True
>>> (1>2) or (2>3)
False
>>> 
>>> a="java"
>>> b='password'
>>> 
>>> if a == 'java'
  File "<stdin>", line 1
    if a == 'java'
                  ^
SyntaxError: invalid syntax
>>> 
>>> if a == 'java':
... print('hello java')
  File "<stdin>", line 2
    print('hello java')
    ^
IndentationError: expected an indented block
>>> 
>>> if a == 'java':
...     print('hello java')
...     if b == 'password':
...             print('access given')
...     else:
...             print('denied')
... 
hello java
access given
>>> 
>>> 
>>> if a == 'java':
...     print('hello java')
...     if b == 'passwords':
...             print('access given')
...     else:
...             print('denied')
... 
hello java
denied
>>> 
>>> a='java'
>>> b=200
>>> if a == 'c++':
...     print('wrong input')
... elif b < 10:
...     print('you are not java')
... elif b > 100:
...     print('you are not c')
... elif b > 10:
...     print('add a proper input')
... 
you are not c
>>> 
>>> 

# Day02

bash-3.2$ python3 
Python 3.9.6 (default, Mar 10 2023, 20:16:38) 
[Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> a,b,c=2,"Hi",10.5
>>> print(type(a))
<class 'int'>
>>> print(type(b))
<class 'str'>
>>> print(type(c))
<class 'float'>
>>> 
>>> d=1+i10
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'i10' is not defined
>>> d=1+10j
>>> print(type(d))
<class 'complex'>
>>> 
>>> str="String a value"
>>> print(str)
String a value
>>> 
>>> str1='''multiline string'''
>>> print(str1)
multiline string
>>> 
>>> print(type(str))
<class 'str'>
>>> print(type(str1))
<class 'str'>
>>> 
>>> str1="Hello worlds !!!"
>>> str2="Hello wolrds !!!"
>>> 
>>> print(str1[0:2])
He
>>> print(str1[5])
 
>>> print(str1[6])
w
>>> 
>>> print(str1*str2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'str'
>>> 
>>> str1,str2="Hello world","hello"
>>> print(str1*str2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'str'
>>> 
>>> 
>>> print(str1*2)
Hello worldHello world
>>> 
>>> print(str1*str2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'str'
>>> print(str1+str2)
Hello worldhello
>>> 
>>> print(str1+" "+str2)
Hello world hello
>>> 
>>> List
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'List' is not defined
>>> 
>>> list=[2,3,'hello',5]
>>> list
[2, 3, 'hello', 5]
>>> 
>>> print(list[1:3])
[3, 'hello']
>>> 
>>> print(list*3)
[2, 3, 'hello', 5, 2, 3, 'hello', 5, 2, 3, 'hello', 5]
>>> 
>>> # Tuple 
>>> 
>>> tuple = ('string',2,'hello')
>>> 
>>> print(tuple(1:3))
  File "<stdin>", line 1
    print(tuple(1:3))
                 ^
SyntaxError: invalid syntax
>>> 
>>> print(tuple[1:3])
(2, 'hello')
>>> 
>>> print(tuple * tuple)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'tuple'
>>> 
>>> print(tuple * 2)
('string', 2, 'hello', 'string', 2, 'hello')
>>> 
>>> print(tuple * tuple)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'tuple'
>>> 
>>> print(tuple + tuple)
('string', 2, 'hello', 'string', 2, 'hello')
>>> 
>>> tuple[2]
'hello'
>>> tuple[2]="hi"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> 
>>> list
[2, 3, 'hello', 5]
>>> list[2]="hi"
>>> list
[2, 3, 'hi', 5]
>>> 
>>> # tuple is immutable 
>>> 
>>> # Dictionary
>>> 
>>> dic = {1:'Java',2:'Python',3:"Docker"}
>>> 
>>> dic
{1: 'Java', 2: 'Python', 3: 'Docker'}
>>> 
>>> print(keys)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'keys' is not defined
>>> print(dic.keys)
<built-in method keys of dict object at 0x102a5e8c0>
>>> 
>>> print(dic.keys())
dict_keys([1, 2, 3])
>>> 
>>> print(dic.values())
dict_values(['Java', 'Python', 'Docker'])
>>> 
>>> print(dic[1])
Java
>>> print(dic[4])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 4
>>> print(dic[3])
Docker
>>> 
>>> print(dic[0])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 0
>>> 
>>> # Boolean
>>> 
>>> print(type(True))
<class 'bool'>
>>> 
>>> print(type(False))
<class 'bool'>
>>> 
>>> print(False)
False
>>> 
>>> print(false)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'false' is not defined
>>> 
>>> 
>>> str='aabbcc'
>>> print(set(str))
{'c', 'a', 'b'}
>>> 
>>> setx={'hello',4,'world',5'}
  File "<stdin>", line 1
    setx={'hello',4,'world',5'}
                               ^
SyntaxError: EOL while scanning string literal
>>> 
>>> setx={'hello',4,'world',5}
>>> 
>>> setx
{'hello', 4, 5, 'world'}
>>> 
>>> setx.add(10)
>>> setx
{4, 5, 'world', 10, 'hello'}
>>> 
>>> setx.add(2,12)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: set.add() takes exactly one argument (2 given)
>>> 
>>> setx.remove([2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> 
>>> setx.remove(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 2
>>> 
>>> setx
{4, 5, 'world', 10, 'hello'}
>>> 
>>> setx.remove(4)
>>> 
>>> setx
{5, 'world', 10, 'hello'}
>>> 
>>> # END 
>>> 
>>> import keyword
>>> dir(keyword)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'iskeyword', 'issoftkeyword', 'kwlist', 'softkwlist']
>>> 
>>> print(keyword.kwlist)
['False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
>>> 
>>> print(keyword.__doc__)
Keywords (from "Grammar/python.gram")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree and run:

    PYTHONPATH=Tools/peg_generator python3 -m pegen.keywordgen         Grammar/Grammar         Grammar/Tokens         Lib/keyword.py

Alternatively, you can run 'make regen-keyword'.

>>> 
>>> a=false
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'false' is not defined
>>> 
>>> a=continue
  File "<stdin>", line 1
    a=continue
      ^
SyntaxError: invalid syntax
>>> 
>>> print( 4 == 4 )  
True
>>> print( 6 > 9 )  
False
>>> print( True or False )  
True
>>> print( 9 <= 28 )  
True
>>> print( 6 > 9 )  
False
>>> print( True and False )  
False
>>> 
>>> print( None == 0 )  
False
>>> print( None == " " )  
False
>>> print( None == False )  
False

>>> for i in range(10):
...     print(i)
... 
0
1
2
3
4
5
6
7
8
9
>>> 
>>> for i in range(0,10):
...     print(i)
... 
0
1
2
3
4
5
6
7
8
9
>>> 
>>> for i in range(2,10):
...     print(i)
... 
2
3
4
5
6
7
8
9
>>> for i in range(2,10,2):
...     print(i)
... 
2
4
6
8
>>> 


# Day03


bash-3.2$ python3 
Python 3.9.6 (default, Mar 10 2023, 20:16:38) 
[Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> list = [1,4,9,16,25]
>>> list
[1, 4, 9, 16, 25]
>>> 
>>> list[0]
1
>>> 
>>> list[-1]
25
>>> 
>>> list[-3:]
[9, 16, 25]
>>> 
>>> list
[1, 4, 9, 16, 25]
>>> list[:]
[1, 4, 9, 16, 25]
>>> 
>>> list + [36,49,64]
[1, 4, 9, 16, 25, 36, 49, 64]
>>> 
>>> list.append(81)
>>> list
[1, 4, 9, 16, 25, 81]
>>> 
>>> list.append(10*10)
>>> list
[1, 4, 9, 16, 25, 81, 100]
>>> 
>>> len(list)
7
>>> 
>>> a=['a','b','c']
>>> n=[1,2,3]
>>> x=[a,n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]
>>> 
>>> x[0]
['a', 'b', 'c']
>>> x[0][0]
'a'
>>> 
>>> x[1][0]
1
>>> 
>>> a,b=0,1
>>> a
0
>>> b
1
>>> a,b=1,0
>>> a
1
>>> b
0
>>> a,b=0,1
>>> while a<10:
...     print(a)
...     a,b=b,a+b
... 
0
1
1
2
3
5
8
>>> 
>>> #Fibonacci series
>>> 
>>> a,b=0,1
>>> while a<1000:
...     print(a)
...     a,b=b,a+b
... 
0
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
>>> 
>>> # for loop in python
>>> 
>>> for i in range(0,100,5):
...     print(i)
... 
0
5
10
15
20
25
30
35
40
45
50
55
60
65
70
75
80
85
90
95
>>> 
>>> square = [1,4,9,16,25]
>>> for i in range(square):
...     print(i)
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object cannot be interpreted as an integer
>>> 
>>> for i in square:
...     print(i,len(i))
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: object of type 'int' has no len()
>>> 
>>> square = [1,4,9,16,25]
>>> for i in square:
...     print(i,len(i))
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: object of type 'int' has no len()
>>> 
>>> 
>>> len(square)
5
>>> 
>>> string = ['a','b','c']
>>> for i in square:
...     print(i,len(i))
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: object of type 'int' has no len()
>>> 
>>> string = ['a','b','c']
>>> for i in string:
...     print(i,len(i))
... 
a 1
b 1
c 1
>>> 
>>> string = ['java','program','python']
>>> for i in string:
...     print(i,len(i))
... 
java 4
program 7
python 6

bash-3.2$ python3 
Python 3.9.6 (default, Mar 10 2023, 20:16:38) 
[Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> dir(range)
['__bool__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index', 'start', 'step', 'stop']
>>> 
>>> range(5,10)
range(5, 10)
>>> 
>>> list(range(5,10))
[5, 6, 7, 8, 9]
>>> 
>>> list(range(0,5,10))
[0]
>>> list(range(0,5,2))
[0, 2, 4]
>>> 
>>> # program 
>>> 
>>> a = ['I','Have','Done','some','changes']
>>> 
>>> for i in range(len(a)):
...     print(i,a[i])
... 
0 I
1 Have
2 Done
3 some
4 changes
>>> 
>>> range(5,10)
range(5, 10)
>>> list(range(5,10))
[5, 6, 7, 8, 9]
>>> sum(range(5,10))
35
>>> 
>>> # break 
>>> 
>>> for n in range(2,10):
...     for x in range(2,n):
...             if n%x == 0:
...                     print(n,'equals',x,'*',n//x)
...                     break
...     else:
...             print(n, 'is a prime number')
... 
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
>>> 
>>> for x in range(1,101):
... for y in range(2,x):
  File "<stdin>", line 2
    for y in range(2,x):
    ^
IndentationError: expected an indented block
if x%y==0:break
else:
print (x,sep=' ', end=' ')>>> if x%y==0:break
... else:
... print (x,sep=' ', end=' ')
  File "<stdin>", line 3
    print (x,sep=' ', end=' ')
    ^
IndentationError: expected an indented block
>>> 
>>> for x in range(1,101):
...     for y in range(2,x):
...             for y in range(2,x):
...     else:
  File "<stdin>", line 4
    else:
IndentationError: expected an indented block
>>> 
>>> for x in range(1,101):
...     for y in range(2,x):
...             if x%y == 0; break 
  File "<stdin>", line 3
    if x%y == 0; break 
               ^
SyntaxError: invalid syntax
>>> 
>>> for x in range(1,101):
...     for y in range(2,x):
...             if x%y == 0: break
...     else:
...             print(x,sep=' ',end = ' ')
... 
1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 >>> 
>>> 
>>> 
>>> # 1 is not a prime no
>>> 
>>> for x in range(2,101):
... 
  File "<stdin>", line 2
    
    ^
IndentationError: expected an indented block
>>> 
>>> for x in range(2,101):
...     for y in range(2,x):
...             if x%y == 0: break
... 
>>> 
>>> for x in range(2,101):
...     for y in range(2,x):
...             if x%y == 0: break
...     else:
...             print(x,sep=' ',end = ' ')
... 
2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 >>> 
>>> 

>>> # even odd 
>>> 
>>> for num in range(2,10):
...     if num % 2 == 0:
...             print("Even no", num)
...     else:
...             print("Odd no", num)
... 
Even no 2
Odd no 3
Even no 4
Odd no 5
Even no 6
Odd no 7
Even no 8
Odd no 9
>>> 
>>> a = input("Enter an no: ")
Enter an no: 2
>>> 

>>> # lambda expressions in python

>>> def increment(n):
...     return lambda x: x+n
... 
>>> 
>>> f = increment(24)
>>> f(0)
24
>>> f(1)
25
>>> f(2)
26
>>> 

>>> pairs = [(1,'one'),(2,'two'),(3,'three')]
>>> pairs[0]
(1, 'one')
>>> pairs[1]
(2, 'two')
>>> pairs[2]
(3, 'three')
>>> 
>>> pairs = [(1,'one'),(2,'two'),(3,'three')]
>>> pairs.sort(key=lambda pair: pair[1])
>>> pairs
[(1, 'one'), (3, 'three'), (2, 'two')]
>>> 
>>> pairs = [(1,'one'),(2,'two'),(3,'three'),(4,'four')]
>>> pairs.sort(key=lambda pair: pair[1])
>>> pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
>>> 
>>> str = 'hellohowru'
>>> rev_upper = lambda string: string.upper()[::-1]
>>> print(rev_upper(str))
URWOHOLLEH
>>> 
>>> str
'hellohowru'
>>> print(str[::-1])
urwoholleh
>>> 
>>> '''single quotation'''
'single quotation'
>>> """single quotation"""
'single quotation'
>>> 'single quotation'
'single quotation'
>>> 
>>> # documentation string
>>> 
>>> def my_function():
...     """Let's do nothing at 
...     at here"""
...     pass
... 
>>> print(my_fucntion.__doc__)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'my_fucntion' is not defined
>>> 
>>> print(my_fucntion._doc_)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'my_fucntion' is not defined
>>> 
>>> # list
>>> 
>>> fruits = ['apple','banana','pear','guava','apple','banana']
>>> fruits.count()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list.count() takes exactly one argument (0 given)
>>> 
>>> fruits.count('apple')
2
>>> fruits.index('apple')
0
>>> 
>>> fruits.index('apple')
0
>>> fruits.revers()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'revers'
>>> 
>>> fruits.reverse()
>>> fruits
['banana', 'apple', 'guava', 'pear', 'banana', 'apple']
>>> 
>>> fruits.append('lemon')
>>> fruits
['banana', 'apple', 'guava', 'pear', 'banana', 'apple', 'lemon']
>>> 
>>> fruits.sort()
>>> fruits
['apple', 'apple', 'banana', 'banana', 'guava', 'lemon', 'pear']
>>> 
>>> fruits.pop()
'pear'
>>> fruits
['apple', 'apple', 'banana', 'banana', 'guava', 'lemon']
>>> 
>>> # Using List as Stack 
>>> 
>>> stack = [1,2,3,4,5]
>>> stack[0]
1
>>> stack.append(3)
>>> stack 
[1, 2, 3, 4, 5, 3]
>>> stack.pop()
3
>>> stack.sort()
>>> stack
[1, 2, 3, 4, 5]
>>> 
>>> # List comprehensions
>>> 
>>> square = []
>>> for i in range(10):
...     square.append(i**2)
... 
>>> sqaure
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sqaure' is not defined
>>> square
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> square = list(map(lambda x: x**2, range(10)))
>>> square
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> square = list(map(lambda x: x**2, range(12)))
>>> square
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121]
>>> 
>>> cube = [x**3 for x in range(12)]
>>> cube
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331]
>>> 
>>> 


# Day04

bash-3.2$ python3 
Python 3.9.6 (default, Mar 10 2023, 20:16:38) 
[Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> # Using Lists as Queues
>>> 
>>> from collections import deque
>>> queue = deque(["Java","Program","Python"])
>>> queue.append("C++")
>>> queue.append("NodeJs")
>>> queue
deque(['Java', 'Program', 'Python', 'C++', 'NodeJs'])
>>> queue.pop() 
'NodeJs'
>>> queue.popleft()
'Java'
>>> eueue.popleft()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'e' is not defined
>>> queue.popleft()
'Program'
>>> 
>>> queue
deque(['Python', 'C++'])
>>> 
>>> # List Comprehensions 
>>> 
>>> cube = []
>>> for i in range(10):
...     cube.append(i***2)
  File "<stdin>", line 2
    cube.append(i***2)
                   ^
SyntaxError: invalid syntax
>>> 
>>> for i in range(10):
...     cube.append(i**2)
... 
>>> 
>>> cube
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> # If the above program use lambda 
>>> 
>>> squares = list(map(lambda x: x**2, range(10)))
>>> squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> squares = [i**2 for i in range(10)]
>>> squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> # Matrix example
>>> 
>>> em_list = []
>>> for x in [1,2,3]
  File "<stdin>", line 1
    for x in [1,2,3]
                    ^
SyntaxError: invalid syntax
>>> 
>>> em_list = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...             if x!y:
  File "<stdin>", line 3
    if x!y:
        ^
SyntaxError: invalid syntax
>>> 
>>> em_list = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...             if x!=y:
...                     em_list.append(i,j)
... 
Traceback (most recent call last):
  File "<stdin>", line 4, in <module>
NameError: name 'j' is not defined
>>> 
>>> 
>>> em_list = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...             if x!=y:
...                     em_list.append((x,y))
... 
>>> em_list
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
>>> 
>>> # another way 
>>> 
>>> [(x,y) for x in [1,2,3] for y in [3,1,4] if x!=y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
>>> 
>>> # Example
>>> 
>>> list = [-3,-2,-1,0,1,2,3]
>>> [i**2 for i in list]
[9, 4, 1, 0, 1, 4, 9]
>>> 
>>> list
[-3, -2, -1, 0, 1, 2, 3]
>>> 
>>> [i**2 for i in list if i>0]
[1, 4, 9]
>>> 
>>> [abs(i**2) for i in list]
[9, 4, 1, 0, 1, 4, 9]
>>> 
>>> 
>>> # Example
>>> 
>>> list_fruits = ['apple','banane','pears']
>>> 
>>> list_fruits = ['apple  ','  banane  ','    pears   ']
>>> list_fruits
['apple  ', '  banane  ', '    pears   ']
>>> 
>>> [i.strip for i in list_fruits]
[<built-in method strip of str object at 0x10282a9b0>, <built-in method strip of str object at 0x10289d230>, <built-in method strip of str object at 0x1028d5170>]
>>> 
>>> [i.strip() for i in list_fruits]
['apple', 'banane', 'pears']
>>> 
>>> [i,i**2 for i in range(10)]
  File "<stdin>", line 1
    [i,i**2 for i in range(10)]
            ^
SyntaxError: invalid syntax
>>> 
>>> [(i,i**2) for i in range(10)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25), (6, 36), (7, 49), (8, 64), (9, 81)]
>>> 
>>> # Example
>>> 
>>> vec = [[1,2,3],[4,5,6],[7,8,9]]
>>> vec
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> [j for i in vec for j in i]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> 
>>> # Example
>>> 
>>> import math
>>> dir(math)
['__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']
>>> 
>>> from import import pi
  File "<stdin>", line 1
    from import import pi
         ^
SyntaxError: invalid syntax
>>> 
>>> from math import pi
>>> [str(round(i)) for i in range(1,10)]
['1', '2', '3', '4', '5', '6', '7', '8', '9']
>>> 
>>> [str(round(pi,i)) for i in range(1,10)]
['3.1', '3.14', '3.142', '3.1416', '3.14159', '3.141593', '3.1415927', '3.14159265', '3.141592654']
>>> 
>>> 22/7
3.142857142857143
>>> 
>>> 22/7
3.142857142857143
>>> 
>>> # Nested List Comprehsions 
>>> 
>>> matrix = [
...     [1, 2, 3, 4],
...     [5, 6, 7, 8],
...     [9, 10, 11, 12],
... ]
>>> 
>>> matrix
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
>>> 
>>> [[row[i] for i in matrix] for i range(4)]
  File "<stdin>", line 1
    [[row[i] for i in matrix] for i range(4)]
                                    ^
SyntaxError: invalid syntax
>>> 
>>> [[row[i] for row in matrix] for i range(4)]
  File "<stdin>", line 1
    [[row[i] for row in matrix] for i range(4)]
                                      ^
SyntaxError: invalid syntax
>>> 
>>> [[row[i] for row in matrix] for i in range(4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
>>> 
>>> # Transpose of rows and columns 
>>> 
>>> transpose = []
>>> for i in range(4):
...     transpose.append([row[i] for row in matrix])
... 
>>> transpose
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
>>> 
>>> # 3X4 -> 4X3 
>>> 
>>> (*matrix)
  File "<stdin>", line 1
    (*matrix)
     ^
SyntaxError: can't use starred expression here
>>> 
>>> zip(*matrix)
<zip object at 0x102912500>
>>> list(zip(*matrix))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not callable
>>> 
>>> matrix
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
>>> 
>>> list(zip(*matrix))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not callable
>>> 
>>> # del statement 
>>> 
>>> a = [-1, 1, 0, 12, 13]
>>> del a[0]
>>> a
[1, 0, 12, 13]
>>> 
>>> del a[2:4]
>>> del
  File "<stdin>", line 1
    del
       ^
SyntaxError: invalid syntax
>>> a
[1, 0]
>>> 
>>> del a[:]
>>> a
[]
>>> len(a)
0
>>> 
>>> # Tuples & Sequences
>>> 
>>> t = 12345, 54345, 'hello'
>>> t[0]
12345
>>> 
>>> tt = t, (1,3,4,5,6)
>>> tt
((12345, 54345, 'hello'), (1, 3, 4, 5, 6))
>>> 
>>> tt[0]
(12345, 54345, 'hello')
>>> tt[1]
(1, 3, 4, 5, 6)
>>> 
>>> tt[0][0]
12345
>>> tt[1][0]
1
>>> tt[0][2]
'hello'
>>> 
>>> # Example
>>> 
>>> empty = ()
>>> len(empty)
0
>>> str = 'hello'
>>> len(str)
5
>>> str = 'hello',
>>> len(str)
1
>>> 
>>> a,b,c,d=10
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: cannot unpack non-iterable int object
>>> 
>>> a,b=1,0
>>> a,b,c=1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: cannot unpack non-iterable int object
>>> 
>>> a,b,c=1,
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 3, got 1)
>>> 
>>> a,b,c=1,0,3
>>> 
>>> a=b=c=d=10
>>> 
>>> a
10
>>> b
10
>>> c
10
>>> d
10
>>> 
>>> a,b,c=1,0,3
>>> a
1
>>> b
0
>>> c
3
>>> 
>>> #set 
>>> 
>>> str = "aabbccdd"
>>> set(str)
{'b', 'a', 'd', 'c'}
>>> 
>>> printlist(set(str))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'printlist' is not defined
>>> 
>>> print(list(set(str)))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object is not callable
>>> 
>>> print(set(str))
{'b', 'a', 'd', 'c'}
>>> 
>>> # Sets
>>> 
>>> # list = []
>>> # tuples = ()
>>> # dictionary = {'key':'values'}
>>> # set = {}
>>> 
>>> # Set 
>>> 
>>> basket = {'apple','banana','grapes','pears','coconut'}
>>> print(basket)
{'coconut', 'pears', 'grapes', 'apple', 'banana'}
>>> 'orange' in basket 
False
>>> 'pears' in basket
True
>>> 
>>> str1 = 'tiyaeugfjisbfhksgh'
>>> str2 = 'ayefbekfbhkeshfwef'
>>> str1 - str2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'str' and 'str'
>>> 
>>> str1 | str2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for |: 'str' and 'str'
>>> 
>>> str1 = 'aabbccdd'
>>> str2 = 'aaddee'
>>> str1 - str2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'str' and 'str'
>>> 
>>> # Example
>>> 
>>> a = [i for i in 'aabbccdd' if i not in 'abc']
>>> a
['d', 'd']
>>> 
>>> # Dictionaries 
>>> 
>>> dic = {'java':1000,'python':2000}
>>> dic['java']
1000
>>> 'java' in dic
True
>>> 'C++' in dic
False
>>> 
>>> del['java']
  File "<stdin>", line 1
    del['java']
        ^
SyntaxError: cannot delete literal
>>> 
>>> del dic['java']
>>> dic
{'python': 2000}
>>> 
>>> # Looping techniques 
>>> 
>>> dic = {'java':1000,'python':2000}
>>> for k,v in dic.items():
...     print(k,v)
... 
java 1000
python 2000
>>> 
>>> # enumerate 
>>> 
>>> for i,v in dic.items():
...     print(i,v)
... 
java 1000
python 2000
>>> 
>>> for i,v in enumerate[('apple','cat','boy')]:
...     print(i,v)
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'types.GenericAlias' object is not iterable
>>> 
>>> for i,v in enumerate(['apple','cat','boy']):
...     print(i,v)
... 
0 apple
1 cat
2 boy
>>> 
>>> str1 = ['java','python','program']
>>> str2 = ['apple','banana','orange']
>>> for i,j in zip(str1,str2):
...     print('first element {0}? it is {1}.'.format(i,j))
... 
first element java? it is apple.
first element python? it is banana.
first element program? it is orange.
>>> 
>>> # Example
>>> 
>>> for i in range(1,10,2):
...     print(i)
... 
1
3
5
7
9
>>> 
>>> for i in reversed(range(1,10,2)):
...     print(i)
... 
9
7
5
3
1
>>> 
>>> str = 'abcde'
>>> str[::-1]
'edcba'
>>> 
>>> # example
>>> 
>>> basket = ['apple','banana','orange','pear']
>>> i for i in range(basket):
  File "<stdin>", line 1
    i for i in range(basket):
      ^
SyntaxError: invalid syntax
>>> 
>>> [i for i in range(basket):]
  File "<stdin>", line 1
    [i for i in range(basket):]
                             ^
SyntaxError: invalid syntax
>>> 
>>> [i for i in range(basket)]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object cannot be interpreted as an integer
>>> 
>>> basket = ['apple','banana','orange','pear']
>>> for i in range(basket):
...     print(i)
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'list' object cannot be interpreted as an integer
>>> 
>>> basket = ['apple','banana','orange','pear']
>>> for i in sorted(basket):
...     print(i)
... 
apple
banana
orange
pear
>>> 
>>> # Example
>>> 
>>> basket = ['apple','banana','orange','pear','apple']
>>> for i in sorted(set(basket)):
...     print(i)
... 
apple
banana
orange
pear
>>> 
>>> # Example
>>> 
>>> import math 
>>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
>>> fil_data = []
>>> for value in raw_data:
...     if not math.isnan(value):
...             fil_data.append(value)
... 
>>> fil_data
[56.2, 51.7, 55.3, 52.5, 47.8]
>>> 
>>> len(fil_data)
5
>>> 
>>> float('NaN')
nan
>>> 


# Day05

bash-3.2$ python3 
Python 3.9.6 (default, Mar 10 2023, 20:16:38) 
[Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> (1,2,3) < (1,2,3)
False
>>> (1,2,3) < (1,2,4)
True
>>> [1,2,3] < [1,2,4]
True
>>> 'Hello' < 'HELLO'
False
>>> [1,2,3] < [1,2,-1]
False
>>> # Above exaples are comparing sequences
>>> 
>>> # Fibonacci Series 
>>> 
>>> def fib(n):
...     a,b=0,1
...     while a<n:
...             print(a, end=' ')
...             a,b = b,a+b
...     print()
... 
>>> 
>>> fib(10)
0 1 1 2 3 5 8 
>>> 
>>> fib(100)
0 1 1 2 3 5 8 13 21 34 55 89 
>>> fib(-100)

>>> 
>>> # Fibonacci Series
>>> 
>>> def fib1(n):
...     res = []
...     a,b = 0,1 
...     while a<n:
...             res.append(a)
...             a,b = b,a+b
...     return res
... 
>>> fib1(100)
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
>>> 
>>> fib(100)
0 1 1 2 3 5 8 13 21 34 55 89 
>>> 
>>> # Example 
>>> 
>>> dir(fibo)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'fibo' is not defined
>>> 
>>> import fib
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'fib'
>>> 

# Created a fibonacci series python code 

def fib(n):
    a,b=0,1
    while a<n:
        print(a, end=' ')
        a,b = b,a+b
    print()

# Modules VVV Important
# Move to Python IDE

>>> import os
>>> os.getcwd()
'/Users/javedalam/Documents/git/devops-lab/3-python-labs/PythonLabs'
>>> 
>>> dir(os)
['CLD_CONTINUED', 'CLD_DUMPED', 'CLD_EXITED', 'CLD_KILLED', 'CLD_STOPPED', 'CLD_TRAPPED', 'DirEntry', 'EX_CANTCREAT', 'EX_CONFIG', 'EX_DATAERR', 'EX_IOERR', 'EX_NOHOST', 'EX_NOINPUT', 'EX_NOPERM', 'EX_NOUSER', 'EX_OK', 'EX_OSERR', 'EX_OSFILE', 'EX_PROTOCOL', 'EX_SOFTWARE', 'EX_TEMPFAIL', 'EX_UNAVAILABLE', 'EX_USAGE', 'F_LOCK', 'F_OK', 'F_TEST', 'F_TLOCK', 'F_ULOCK', 'GenericAlias', 'Mapping', 'MutableMapping', 'NGROUPS_MAX', 'O_ACCMODE', 'O_APPEND', 'O_ASYNC', 'O_CLOEXEC', 'O_CREAT', 'O_DIRECTORY', 'O_DSYNC', 'O_EXCL', 'O_EXEC', 'O_EXLOCK', 'O_NDELAY', 'O_NOCTTY', 'O_NOFOLLOW', 'O_NONBLOCK', 'O_RDONLY', 'O_RDWR', 'O_SEARCH', 'O_SHLOCK', 'O_SYNC', 'O_TRUNC', 'O_WRONLY', 'POSIX_SPAWN_CLOSE', 'POSIX_SPAWN_DUP2', 'POSIX_SPAWN_OPEN', 'PRIO_PGRP', 'PRIO_PROCESS', 'PRIO_USER', 'P_ALL', 'P_NOWAIT', 'P_NOWAITO', 'P_PGID', 'P_PID', 'P_WAIT', 'PathLike', 'RTLD_GLOBAL', 'RTLD_LAZY', 'RTLD_LOCAL', 'RTLD_NODELETE', 'RTLD_NOLOAD', 'RTLD_NOW', 'R_OK', 'SCHED_FIFO', 'SCHED_OTHER', 'SCHED_RR', 'SEEK_CUR', 'SEEK_DATA', 'SEEK_END', 'SEEK_HOLE', 'SEEK_SET', 'ST_NOSUID', 'ST_RDONLY', 'TMP_MAX', 'WCONTINUED', 'WCOREDUMP', 'WEXITED', 'WEXITSTATUS', 'WIFCONTINUED', 'WIFEXITED', 'WIFSIGNALED', 'WIFSTOPPED', 'WNOHANG', 'WNOWAIT', 'WSTOPPED', 'WSTOPSIG', 'WTERMSIG', 'WUNTRACED', 'W_OK', 'X_OK', '_Environ', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_methods', '_execvpe', '_exists', '_exit', '_fspath', '_fwalk', '_get_exports_list', '_spawnvef', '_system', '_walk', '_wrap_close', 'abc', 'abort', 'access', 'altsep', 'chdir', 'chflags', 'chmod', 'chown', 'chroot', 'close', 'closerange', 'confstr', 'confstr_names', 'cpu_count', 'ctermid', 'curdir', 'defpath', 'device_encoding', 'devnull', 'dup', 'dup2', 'environ', 'environb', 'error', 'execl', 'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fchdir', 'fchmod', 'fchown', 'fdopen', 'fork', 'forkpty', 'fpathconf', 'fsdecode', 'fsencode', 'fspath', 'fstat', 'fstatvfs', 'fsync', 'ftruncate', 'fwalk', 'get_blocking', 'get_exec_path', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'getegid', 'getenv', 'getenvb', 'geteuid', 'getgid', 'getgrouplist', 'getgroups', 'getloadavg', 'getlogin', 'getpgid', 'getpgrp', 'getpid', 'getppid', 'getpriority', 'getsid', 'getuid', 'initgroups', 'isatty', 'kill', 'killpg', 'lchflags', 'lchmod', 'lchown', 'linesep', 'link', 'listdir', 'lockf', 'lseek', 'lstat', 'major', 'makedev', 'makedirs', 'minor', 'mkdir', 'mkfifo', 'mknod', 'name', 'nice', 'open', 'openpty', 'pardir', 'path', 'pathconf', 'pathconf_names', 'pathsep', 'pipe', 'popen', 'posix_spawn', 'posix_spawnp', 'pread', 'preadv', 'putenv', 'pwrite', 'pwritev', 'read', 'readlink', 'readv', 'register_at_fork', 'remove', 'removedirs', 'rename', 'renames', 'replace', 'rmdir', 'scandir', 'sched_get_priority_max', 'sched_get_priority_min', 'sched_yield', 'sendfile', 'sep', 'set_blocking', 'set_inheritable', 'setegid', 'seteuid', 'setgid', 'setgroups', 'setpgid', 'setpgrp', 'setpriority', 'setregid', 'setreuid', 'setsid', 'setuid', 'spawnl', 'spawnle', 'spawnlp', 'spawnlpe', 'spawnv', 'spawnve', 'spawnvp', 'spawnvpe', 'st', 'stat', 'stat_result', 'statvfs', 'statvfs_result', 'strerror', 'supports_bytes_environ', 'supports_dir_fd', 'supports_effective_ids', 'supports_fd', 'supports_follow_symlinks', 'symlink', 'sync', 'sys', 'sysconf', 'sysconf_names', 'system', 'tcgetpgrp', 'tcsetpgrp', 'terminal_size', 'times', 'times_result', 'truncate', 'ttyname', 'umask', 'uname', 'uname_result', 'unlink', 'unsetenv', 'urandom', 'utime', 'wait', 'wait3', 'wait4', 'waitpid', 'waitstatus_to_exitcode', 'walk', 'write', 'writev']
>>> 

# Import the existing code 
>>> import os
>>> os.getcwd()
'/Users/javedalam/Documents/git/devops-lab/3-python-labs/PythonLabs'
>>> 
>>> import fibo
>>> fibo.fib(100)
0 1 1 2 3 5 8 13 21 34 55 89 
>>> 
>>> fibo.fib(10)
0 1 1 2 3 5 8 
>>> 

>>> from fibo import fib as fibonacci
>>> fibonacci(100)
0 1 1 2 3 5 8 13 21 34 55 89 
>>> 

>>> # Standard Modules 
>>> 
>>> import sys
>>> sys.ps1
'>>> '
>>> sys.ps2
'... '
>>> sys.ps1 = 'C>'
C>
C>sys.ps1 = '>>>'
>>>
>>>import sys 
>>>sys.ps1 = '>>> '
>>> 

>>> import sys
>>> dir(sys)
['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__', '__interactivehook__', '__loader__', '__name__', '__package__', '__spec__', '__stderr__', '__stdin__', '__stdout__', '__unraisablehook__', '_base_executable', '_clear_type_cache', '_current_frames', '_debugmallocstats', '_framework', '_getframe', '_git', '_home', '_xoptions', 'abiflags', 'addaudithook', 'api_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth', 'getallocatedblocks', 'getdefaultencoding', 'getdlopenflags', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'is_finalizing', 'last_traceback', 'last_type', 'last_value', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'platlibdir', 'prefix', 'ps1', 'ps2', 'pycache_prefix', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setdlopenflags', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info', 'warnoptions']
>>> 

>>> import builtins
>>> dir(builtins)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
>>>

>>> # String Formatting
>>> 
>>> for i in range(1,11):
...     print('{0:2d} {1:3d} {2:4d}'.format(i,i*i,i*i*i))
... 
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
>>> 


# Day06

bash-3.2$ python3 
Python 3.9.6 (default, Mar 10 2023, 20:16:38) 
[Clang 14.0.3 (clang-1403.0.22.14.1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> str = "Hello World!!!"
>>> print(str)
Hello World!!!
>>> 
>>> repr(str)
"'Hello World!!!'"
>>> 
>>> str(1/9)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object is not callable
>>> 
>>> a = 10*3.26
>>> b = 20*20
>>> a
32.599999999999994
>>> b
400
>>> s1 = 'The value of a is ' + repr(a) + ', and b is ' + repr(b) + '...'
>>> print(s1)
The value of a is 32.599999999999994, and b is 400...
>>> 
>>> # Formatting Strings
>>> 
>>> dir(amth)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'amth' is not defined
>>> 
>>> import math
>>> dir(amth)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'amth' is not defined
>>> dir(math)
['__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']
>>> 
>>> import math
>>> print('The value of pi is approximately {math.pi: .3f}')
The value of pi is approximately {math.pi: .3f}
>>> print(f'The value of pi is approximately {math.pi: .3f}')
The value of pi is approximately  3.142
>>> 
>>> dic = {'java':1000,'python':2000}
>>> for book,pages in dic.items():
...     print("{book} ==> {pages}")
... 
{book} ==> {pages}
{book} ==> {pages}
>>> 
>>> for book,pages in dic.items():
...     print(f"{book} ==> {pages}")
... 
java ==> 1000
python ==> 2000
>>> 
>>> # String format
>>> 
>>> print("The value of {} and {} are ".format('java',1000))
The value of java and 1000 are 
>>> 
>>> print("The value of {} and {}.".format('java',1000))
The value of java and 1000.
>>> 
>>> print("The value of {0} and {1}.".format('java',1000))
The value of java and 1000.
>>> 
>>> for i in range(1,11):
...     print('{0:2d} {1:3d} {2:4d}'.format(i,i*i,i*i*i))
... 
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
>>> 
>>> 
>>> for i in range(1,11):
...     print('{0} {1} {2}'.format(i,i*i,i*i*i))
... 
1 1 1
2 4 8
3 9 27
4 16 64
5 25 125
6 36 216
7 49 343
8 64 512
9 81 729
10 100 1000
>>> 
>>> for i in range(1,11):
...     print(repr(i),rjust(2),repr(i*i),rjust(3), end=' ')
...     print(repr(i*i*i),rjust(4))
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'rjust' is not defined
>>> 
>>> import rjust
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'rjust'
>>> 
>>> '10'.zfill()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: str.zfill() takes exactly one argument (0 given)
>>> 
>>> '10'.zfill(5)
'00010'
>>> 
>>> '3.15'.zfill(9)
'000003.15'
>>> 
>>> '3.1556789875456'.zfill(5)
'3.1556789875456'
>>> 
>>> '-3.15'.zfill(9)
'-00003.15'
>>> 
>>> import math
>>> print('The value of pi is approximately %4.3f.',%math.pi)
  File "<stdin>", line 1
    print('The value of pi is approximately %4.3f.',%math.pi)
                                                    ^
SyntaxError: invalid syntax
>>> 
>>> print('The value of pi is approximately %4.3f.',% math.pi)
  File "<stdin>", line 1
    print('The value of pi is approximately %4.3f.',% math.pi)
                                                    ^
SyntaxError: invalid syntax
>>> 
>>> # Ignore becaue of old format
>>> 
>>> # Reading and Writing Files
>>> 
>>> f = open('workfile','w',encoding="utf-8")
>>>
>>> f
<_io.TextIOWrapper name='workfile' mode='w' encoding='utf-8'>
>>> 
>>> with open('workfile','w',encoding="utf-8") as f:
...     read_data = f.read()
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
io.UnsupportedOperation: not readable
>>> 
>>> # Errors and Exceptions
>>> 
>>> 1/0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> 
>>> while True print("hello world!!!")
  File "<stdin>", line 1
    while True print("hello world!!!")
               ^
SyntaxError: invalid syntax
>>> 
>>> 11*(1/0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: division by zero
>>> 
>>> 2 + tee*3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'tee' is not defined
>>> 
>>> '5' + 2
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate str (not "int") to str
>>> 
>>> # Handling Exceptions
>>> 
>>> while True:
...     try:
...     a = input("Please enter a value: ")
  File "<stdin>", line 3
    a = input("Please enter a value: ")
    ^
IndentationError: expected an indented block
>>> 
>>> while True:
...     a = int(input("Please enter a value: "))
...     break 
...     
[12]+  Stopped                 python3
bash-3.2$ 

>>> import sys
>>> 
>>> try:
...     f = open('myfile.txt')
...     s = f.readline()
...     i = int(s.strip())
... except OSError as err:
...     print("OS error:", err)
... except ValueError:
...     print("Could not convert data to an integer.")
... except Exception as err:
...     print(f"Unexpected {err=}, {type(err)=}")
...     raise
... 
OS error: [Errno 2] No such file or directory: 'myfile.txt'
>>> 


# Day07

python3
Python 3.11.3 (main, Apr  7 2023, 20:13:31) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> from textblob import TextBlob
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'textblob'
>>> 
>>> import textblob
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'textblob'
>>> 
>>> def divide(i,j):
...     try: 
...             result = i/j
...     except ZeroDivisionError:
...             print("divided by zero")
...     else:
...             print("result is: ", result)
...     finally:
...             print("finally execute...")
... 
>>> divide(2,1)
result is:  2.0
finally execute...
>>> 
>>> divide(2,0)
divided by zero
finally execute...
>>> 
>>> divide("3","1")
finally execute...
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in divide
TypeError: unsupported operand type(s) for /: 'str' and 'str'
>>> 
>>> 
>>> #Iterators
>>> 
>>> for element in [1,2,3]:
...     print(element)
... 
1
2
3
>>> [element for element in (1,2,3)]
[1, 2, 3]
>>> 
>>> [char for char in "1234"]
['1', '2', '3', '4']
>>> 
>>> [(line,end=' ') for line in open("file-path")]
  File "<stdin>", line 1
    [(line,end=' ') for line in open("file-path")]
           ^^^^^^^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
>>> 
>>> str = "abcd"
>>> it = iter(str)
>>> it
<str_ascii_iterator object at 0x100d339a0>
>>> 
>>> next(it)
'a'
>>> next(it)
'b'
>>> next(it)
'c'
>>> next(it)
'd'
>>> next(it)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>> 
>>> # Generators
>>> 
>>> [i for i in reverse("string")]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'reverse' is not defined. Did you mean: 'reversed'?
>>> 
>>> def reverse(data):
...     for i in range(len(data)-1,-1,-1):
...             yield(data[index])
... 
>>> 
>>> [i for i in reverse("string")]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <listcomp>
  File "<stdin>", line 3, in reverse
NameError: name 'index' is not defined
>>> 
>>> 
>>> 
>>> def reverse(data):
...     for i in range(len(data)-1,-1,-1):
...             yield(data[i])
... 
>>> [i for i in reverse("string")]
['g', 'n', 'i', 'r', 't', 's']
>>> 
>>> # Another way
>>> 
>>> str = "string"
>>> print(string[::-1])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'string' is not defined
>>> 
>>> str = "string"
>>> print(str[::-1])
gnirts
>>> 
>>> # Generators Expressions
>>> 
>>> sum(i*i for i in range(5))
30
>>> 
>>> sum(i*i for i in range(10))
285
>>> 
>>> lst1 = [10,20,40]
>>> lst2 = [2,3,5]
>>> sum(i*j for i,j in zip(lst1,lst2))
280
>>> 
>>> # Set 
>>> 
>>> str = "stringgggg"
>>> print(set(string))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'string' is not defined
>>> 
>>> print(set(str))
{'t', 'n', 's', 'i', 'g', 'r'}
>>> 
>>> # Modules 
>>> 
>>> import os 
>>> dir(os)
['CLD_CONTINUED', 'CLD_DUMPED', 'CLD_EXITED', 'CLD_KILLED', 'CLD_STOPPED', 'CLD_TRAPPED', 'DirEntry', 'EX_CANTCREAT', 'EX_CONFIG', 'EX_DATAERR', 'EX_IOERR', 'EX_NOHOST', 'EX_NOINPUT', 'EX_NOPERM', 'EX_NOUSER', 'EX_OK', 'EX_OSERR', 'EX_OSFILE', 'EX_PROTOCOL', 'EX_SOFTWARE', 'EX_TEMPFAIL', 'EX_UNAVAILABLE', 'EX_USAGE', 'F_LOCK', 'F_OK', 'F_TEST', 'F_TLOCK', 'F_ULOCK', 'GenericAlias', 'Mapping', 'MutableMapping', 'NGROUPS_MAX', 'O_ACCMODE', 'O_APPEND', 'O_ASYNC', 'O_CLOEXEC', 'O_CREAT', 'O_DIRECTORY', 'O_DSYNC', 'O_EVTONLY', 'O_EXCL', 'O_EXEC', 'O_EXLOCK', 'O_FSYNC', 'O_NDELAY', 'O_NOCTTY', 'O_NOFOLLOW', 'O_NOFOLLOW_ANY', 'O_NONBLOCK', 'O_RDONLY', 'O_RDWR', 'O_SEARCH', 'O_SHLOCK', 'O_SYMLINK', 'O_SYNC', 'O_TRUNC', 'O_WRONLY', 'POSIX_SPAWN_CLOSE', 'POSIX_SPAWN_DUP2', 'POSIX_SPAWN_OPEN', 'PRIO_PGRP', 'PRIO_PROCESS', 'PRIO_USER', 'P_ALL', 'P_NOWAIT', 'P_NOWAITO', 'P_PGID', 'P_PID', 'P_WAIT', 'PathLike', 'RTLD_GLOBAL', 'RTLD_LAZY', 'RTLD_LOCAL', 'RTLD_NODELETE', 'RTLD_NOLOAD', 'RTLD_NOW', 'R_OK', 'SCHED_FIFO', 'SCHED_OTHER', 'SCHED_RR', 'SEEK_CUR', 'SEEK_DATA', 'SEEK_END', 'SEEK_HOLE', 'SEEK_SET', 'ST_NOSUID', 'ST_RDONLY', 'TMP_MAX', 'WCONTINUED', 'WCOREDUMP', 'WEXITED', 'WEXITSTATUS', 'WIFCONTINUED', 'WIFEXITED', 'WIFSIGNALED', 'WIFSTOPPED', 'WNOHANG', 'WNOWAIT', 'WSTOPPED', 'WSTOPSIG', 'WTERMSIG', 'WUNTRACED', 'W_OK', 'X_OK', '_Environ', '__all__', '__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_methods', '_execvpe', '_exists', '_exit', '_fspath', '_fwalk', '_get_exports_list', '_spawnvef', '_walk', '_wrap_close', 'abc', 'abort', 'access', 'altsep', 'chdir', 'chflags', 'chmod', 'chown', 'chroot', 'close', 'closerange', 'confstr', 'confstr_names', 'cpu_count', 'ctermid', 'curdir', 'defpath', 'device_encoding', 'devnull', 'dup', 'dup2', 'environ', 'environb', 'error', 'execl', 'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fchdir', 'fchmod', 'fchown', 'fdopen', 'fork', 'forkpty', 'fpathconf', 'fsdecode', 'fsencode', 'fspath', 'fstat', 'fstatvfs', 'fsync', 'ftruncate', 'fwalk', 'get_blocking', 'get_exec_path', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'getegid', 'getenv', 'getenvb', 'geteuid', 'getgid', 'getgrouplist', 'getgroups', 'getloadavg', 'getlogin', 'getpgid', 'getpgrp', 'getpid', 'getppid', 'getpriority', 'getsid', 'getuid', 'initgroups', 'isatty', 'kill', 'killpg', 'lchflags', 'lchmod', 'lchown', 'linesep', 'link', 'listdir', 'lockf', 'login_tty', 'lseek', 'lstat', 'major', 'makedev', 'makedirs', 'minor', 'mkdir', 'mkfifo', 'mknod', 'name', 'nice', 'open', 'openpty', 'pardir', 'path', 'pathconf', 'pathconf_names', 'pathsep', 'pipe', 'popen', 'posix_spawn', 'posix_spawnp', 'pread', 'preadv', 'putenv', 'pwrite', 'pwritev', 'read', 'readlink', 'readv', 'register_at_fork', 'remove', 'removedirs', 'rename', 'renames', 'replace', 'rmdir', 'scandir', 'sched_get_priority_max', 'sched_get_priority_min', 'sched_yield', 'sendfile', 'sep', 'set_blocking', 'set_inheritable', 'setegid', 'seteuid', 'setgid', 'setgroups', 'setpgid', 'setpgrp', 'setpriority', 'setregid', 'setreuid', 'setsid', 'setuid', 'spawnl', 'spawnle', 'spawnlp', 'spawnlpe', 'spawnv', 'spawnve', 'spawnvp', 'spawnvpe', 'st', 'stat', 'stat_result', 'statvfs', 'statvfs_result', 'strerror', 'supports_bytes_environ', 'supports_dir_fd', 'supports_effective_ids', 'supports_fd', 'supports_follow_symlinks', 'symlink', 'sync', 'sys', 'sysconf', 'sysconf_names', 'system', 'tcgetpgrp', 'tcsetpgrp', 'terminal_size', 'times', 'times_result', 'truncate', 'ttyname', 'umask', 'uname', 'uname_result', 'unlink', 'unsetenv', 'urandom', 'utime', 'wait', 'wait3', 'wait4', 'waitpid', 'waitstatus_to_exitcode', 'walk', 'write', 'writev']
>>> 
>>> import os
>>> os.getcwd()
'/Users/javedalam/Documents/git/devops-lab/3-python-labs/PythonLabs'
>>> 
>>> os.chdir('/Users/javedalam/Documents/git/devops-lab/3-python-labs')
>>> os.getcwd()
'/Users/javedalam/Documents/git/devops-lab/3-python-labs'
>>> 
>>> os.chdir('/Users/javedalam/Documents/git/devops-lab/3-python-labs/PythonLabs')
>>> os.getcwd()
'/Users/javedalam/Documents/git/devops-lab/3-python-labs/PythonLabs'
>>> 
>>> # WildCards
>>> 
>>> import glob
>>> glob.glob('*.py')
['fibo.py', 'sample-collection.py', 'enum.py']
>>> 
>>> dir(glob)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_dir_open_flags', '_glob0', '_glob1', '_glob2', '_iglob', '_isdir', '_ishidden', '_isrecursive', '_iterdir', '_join', '_lexists', '_listdir', '_rlistdir', 'contextlib', 'escape', 'fnmatch', 'glob', 'glob0', 'glob1', 'has_magic', 'iglob', 'itertools', 'magic_check', 'magic_check_bytes', 'os', 're', 'stat', 'sys']
>>> 
>>> # Command Line Arguemnts 
>>> 
>>> import sys
>>> print(sys.argv)
['']
>>> 
>>> # String pattern matching
>>> 
>>> import re
>>> re.findall(r'\bf[a-z]*')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: findall() missing 1 required positional argument: 'string'
>>> 
>>> dir(re)
['A', 'ASCII', 'DEBUG', 'DOTALL', 'I', 'IGNORECASE', 'L', 'LOCALE', 'M', 'MULTILINE', 'Match', 'NOFLAG', 'Pattern', 'RegexFlag', 'S', 'Scanner', 'T', 'TEMPLATE', 'U', 'UNICODE', 'VERBOSE', 'X', '_MAXCACHE', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_cache', '_casefix', '_compile', '_compile_repl', '_compiler', '_constants', '_expand', '_parser', '_pickle', '_special_chars_map', '_subx', 'compile', 'copyreg', 'enum', 'error', 'escape', 'findall', 'finditer', 'fullmatch', 'functools', 'match', 'purge', 'search', 'split', 'sub', 'subn', 'template']
>>> 
>>> import re
>>> re.findall(r'\bf[a-z]*','hello man how are you')
[]
>>> 
>>> re.findall(r'\bf[a-z]*','which foot or hand fell fastest')
['foot', 'fell', 'fastest']
>>> 
>>> re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the rat')
'cat in the rat'
>>> 
>>> 'tea of spoon'.replace('tea','too')
'too of spoon'
>>> 
>>> # MAth
>>> 
>>> import math
>>> dir(math)
['__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'cbrt', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'exp2', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']
>>> 
>>> import random
>>> random.choice(['apple','banana','pears'])
'banana'
>>> random.choice(['apple','banana','pears'])
'apple'
>>> random.choice(['apple','banana','pears'])
'pears'
>>> random.choice(['apple','banana','pears'])
'banana'
>>> 
>>> random.sample(range(10,20))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Random.sample() missing 1 required positional argument: 'k'
>>> 
>>> random.sample(range(10),2))
  File "<stdin>", line 1
    random.sample(range(10),2))
                              ^
SyntaxError: unmatched ')'
>>> 
>>> random.sample(range(10),2)
[1, 7]
>>> 
>>> random.sample(range(10),2)
[6, 8]
>>> 
>>> random.random()
0.872163426981971
>>> 
>>> random.random()
0.8458971979132511
>>> random.randrandom(6)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'random' has no attribute 'randrandom'. Did you mean: 'randrange'?
>>> 
>>> random.randrange(6)
5
>>> 
>>> random.randrange(6)
3
>>>
>>> 
>>> import statistics
>>> 
>>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
>>> statistics.mean(data)
1.6071428571428572
>>> statistics.median(data)
1.25
>>> statistics.variance(data)
1.3720238095238095
>>> 
>>> 
>>> import math
>>> math.cos(math.pi / 4)
0.7071067811865476
>>> 
>>> math.log(1024, 2)
10.0
>>> 
>>> 

# Day08

javedalam@Javeds-MacBook-Air PythonLabs % python3
Python 3.11.3 (main, Apr  7 2023, 20:13:31) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> from urllib.request import urlopen
>>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as response:
...     for line in response:
...     line = line.decode()
  File "<stdin>", line 3
    line = line.decode()
    ^
IndentationError: expected an indented block after 'for' statement on line 2
>>> 
>>> # Data and Time
>>> 
>>> from datetime import date
>>> now = data.today()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'data' is not defined. Did you mean: 'date'?
>>> 
>>> from datetime import date
>>> now = date.today()
>>> now
datetime.date(2023, 5, 16)
>>> 
>>> now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
'05-16-23. 16 May 2023 is a Tuesday on the 16 day of May.'
>>> 
>>> old = date(1988, 3, 13)
>>> age = now - old
>>> age
datetime.timedelta(days=12847)
>>> 
>>> # Data compression
>>> 
>>> import zlib
>>> dir(zlib)
['DEFLATED', 'DEF_BUF_SIZE', 'DEF_MEM_LEVEL', 'MAX_WBITS', 'ZLIB_RUNTIME_VERSION', 'ZLIB_VERSION', 'Z_BEST_COMPRESSION', 'Z_BEST_SPEED', 'Z_BLOCK', 'Z_DEFAULT_COMPRESSION', 'Z_DEFAULT_STRATEGY', 'Z_FILTERED', 'Z_FINISH', 'Z_FIXED', 'Z_FULL_FLUSH', 'Z_HUFFMAN_ONLY', 'Z_NO_COMPRESSION', 'Z_NO_FLUSH', 'Z_PARTIAL_FLUSH', 'Z_RLE', 'Z_SYNC_FLUSH', 'Z_TREES', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '__version__', 'adler32', 'compress', 'compressobj', 'crc32', 'decompress', 'decompressobj', 'error']
>>> 
>>> s = b'where exactly you were now a dats'
>>> len(s)
33
>>> 
>>> com = zlib.compress(s)
>>> len(s)
33
>>> 
>>> s = b'witch which has which witches wrist watch'
>>> len(s)
41
>>> com = zlib.compress(s)
>>> len(s)
41
>>> 
>>> s = 'witch which has which witches wrist watch'
>>> len(s)
41
>>> 
>>> com = zlib.compress(s)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: a bytes-like object is required, not 'str'
>>> 
>>> com = zlib.compress(s)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: a bytes-like object is required, not 'str'
>>> 
>>> s = b'witch which has which witches wrist watch'
>>> len(s)
41
>>> t = zlib.compress(s)
>>> len(t)
37
>>> 
>>> 
>>> import zlib
>>> s = b'witch which has which witches wrist watch'
>>> len(s)
41
>>> 
>>> t = zlib.compress(s)
>>> len(t)
37
>>> 
>>> zlib.decompress(t)
b'witch which has which witches wrist watch'
>>> 
>>> len(t)
37
>>> len(s)
41
>>> 
>>> zlib.crc32(s)
226805979
>>> 
>>> r = zlib.decompress(t)
>>> len(r)
41
>>> 
>>> # Output Formatting
>>> 
>>> import reprlib
>>> reprlib.repr(set('agruiehguwifbisgfhighsr'))
"{'a', 'b', 'e', 'f', 'g', 'h', ...}"
>>> 
>>> import pprint
>>> row = [[[['black','red'],'orage',['greeb','blue']],[['purple','yelloe'],'green']]]
>>> pprint.pprint((t,width=30)
  File "<stdin>", line 1
    pprint.pprint((t,width=30)
                     ^^^^^^^^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
>>> pprint.pprint((row, width=30)
  File "<stdin>", line 1
    pprint.pprint((row, width=30)
                        ^^^^^^^^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
>>> 
>>> pprint.pprint((row, width = 30)
  File "<stdin>", line 1
    pprint.pprint((row, width = 30)
                        ^^^^^^^^^^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
>>> 
>>> pprint.pprint((row, width == 30)
... 
... 
... 
KeyboardInterrupt
>>> 
>>> pprint.pprint((row, width=30))
  File "<stdin>", line 1
    pprint.pprint((row, width=30))
                        ^^^^^^^^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
>>> 
>>> pprint.pprint((row, width==30))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'width' is not defined
>>> 
>>> pprint.pprint(row, width=30)
[[[['black', 'red'],
   'orage',
   ['greeb', 'blue']],
  [['purple', 'yelloe'],
   'green']]]
>>> 
>>> 
>>> import pprint
>>> row = [[[['black','red'],'orage',['greeb','blue']],[['purple','yelloe'],'green']]]
>>> pprint.pprint((row, width==30))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'width' is not defined
>>> pprint.pprint(row, width=30)
[[[['black', 'red'],
   'orage',
   ['greeb', 'blue']],
  [['purple', 'yelloe'],
   'green']]]
>>> 
>>> 
>>> # Example
>>> 
>>> import textwrap
>>> doc = """The wrap() method is just like fill() except that it returns
... a list of strings instead of one big string with newlines to separate
... the wrapped lines."""
>>> 
>>> doc
'The wrap() method is just like fill() except that it returns\na list of strings instead of one big string with newlines to separate\nthe wrapped lines.'
>>> 
>>> print(textwrap.fill(doc, width=40))
The wrap() method is just like fill()
except that it returns a list of strings
instead of one big string with newlines
to separate the wrapped lines.
>>> 
>>> 

---
